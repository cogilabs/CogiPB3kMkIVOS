const fs = require('fs');
const path = require('path');

const iconsDir = path.join(__dirname, '..', 'images', 'icons');
const outFile = path.join(__dirname, '..', 'images', 'icons-sprite.svg');

function sanitizeId(name) {
  return 'icon-' + name.replace(/[^a-zA-Z0-9_-]/g, '-');
}

function extractViewBoxAndContent(svgText) {
  const svgOpen = svgText.match(/<svg[^>]*>/i);
  const svgClose = svgText.match(/<\/svg>\s*$/i);
  if (!svgOpen || !svgClose) return { viewBox: null, content: svgText };
  const openTag = svgOpen[0];
  const viewBoxMatch = openTag.match(/viewBox\s*=\s*"([^"]+)"/i);
  const viewBox = viewBoxMatch ? viewBoxMatch[1] : null;
  const start = svgOpen.index + openTag.length;
  const end = svgClose.index;
  const inner = svgText.slice(start, end).trim();
  return { viewBox, content: inner };
}

function buildSprite() {
  const files = fs.readdirSync(iconsDir).filter(f => f.toLowerCase().endsWith('.svg'));
  const symbols = [];

  files.forEach(file => {
    const basename = path.basename(file, '.svg');
    const id = sanitizeId(basename);
    const full = fs.readFileSync(path.join(iconsDir, file), 'utf8');

    if (/\<symbol[^>]*id=["']?icon-/.test(full)) {
      const matches = full.match(/<symbol[\s\S]*?<\/symbol>/gi);
      if (matches) symbols.push(...matches);
      return;
    }

    const { viewBox, content } = extractViewBoxAndContent(full);
    const vbAttr = viewBox ? ` viewBox=\"${viewBox}\"` : '';
    const symbol = `<symbol id=\"${id}\"${vbAttr}>${content}</symbol>`;
    symbols.push(symbol);
  });

  const header = `<!-- Generated by scripts/build-icon-sprite.js - Do not edit manually -->\n<svg xmlns=\"http://www.w3.org/2000/svg\" style=\"display:none\">\n`;
  const footer = '\n</svg>\n';
  const out = header + symbols.join('\n') + footer;
  fs.writeFileSync(outFile, out, 'utf8');
  console.log('Wrote', outFile, 'with', symbols.length, 'symbols');
}

if (require.main === module) {
  try {
    buildSprite();
  } catch (e) {
    console.error('Failed to build sprite:', e);
    process.exit(1);
  }
}
